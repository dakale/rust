# Recommened editor for this file: https://github.com/Microsoft/azure-pipelines-vscode
name: rust

resources:
  repositories:
  - repository: self
    checkoutOptions:
      submodules: false

# Note:
# for sccache to work, you'll need to provide the backend connection information
# I opted for an Azure Storage account I set up in the same region as
# the johnterickson Azure Pipelines account.
# In Pipeline Settings, I've set the following:
# SCCACHE_AZURE_CONNECTION_STRING: [secret]
# SCCACHE_AZURE_BLOB_CONTAINER: rust-sccache
# DOCKER_LAYER_CACHE_STORAGE_ACCOUNT: rustlangtools
# DOCKER_LAYER_CACHE_CONTAINER_NAME: docker
# DOCKER_LAYER_CACHE_ACCOUNT_KEY: [secret]

# Note 2:
# To get sccache working, I had to build it with the Azure feature enabled
# and with openssl statically-linked for Linux.
# Here's the build (with a backpointer to source) of where the bits came from:
# https://dev.azure.com/johnterickson/rust-lang/_build/results?buildId=275

variables:
  # By default schannel checks revocation of certificates unlike some other SSL
  # backends, but we've historically had problems on CI where a revocation
  # server goes down presumably. See #43333 for more info
  CARGO_HTTP_CHECK_REVOKE: false
  
  # for sccache to work, 

jobs:
  - job: linux_and_osx
    timeoutInMinutes: 600
    variables:
      # by default, assuming Linux; override for osx
      HOST_IMAGE: ubuntu-16.04
    strategy:
      matrix:
        # x86_64-gnu-llvm-5.0:
        #   RUST_BACKTRACE: 1
        # # if: type = pull_request OR branch = auto

        dist-x86_64-linux:
          DEPLOY: 1
        # if: branch = try OR branch = auto

        # "alternate" deployments, these are "nightlies" but have LLVM assertions
        # turned on, they're deployed to a different location primarily for
        # additional testing.
        dist-x86_64-linux-alt:
          IMAGE: dist-x86_64-linux
          DEPLOY_ALT: 1
        # if: branch = try OR branch = auto

    # pool:
    #   vmImage: $[ variables['HOST_IMAGE'] ] 
    steps:
      - script: |
          printenv | sort
        displayName: dump env vars

      - script: |
          sudo apt install gdb
        displayName: install gdb
        condition: eq(variables['Agent.OS'],'Linux')
      
      - script: |
          pip install --user awscli
          export PATH=$PATH:$HOME/.local/bin:$HOME/Library/Python/2.7/bin/
          mkdir -p $HOME/rustsrc
          echo "##vso[task.setvariable variable=PATH;]$PATH"
        displayName:  before_install

      # FIXME(#46924): these two commands are required to enable IPv6,
      # they shouldn't exist, please revert once more official solutions appeared.
      # see https://github.com/travis-ci/travis-ci/issues/8891#issuecomment-353403729
      - script: |
          echo '{"ipv6":true,"fixed-cidr-v6":"fd9a:8454:6789:13f7::/64"}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
        condition: eq(variables['Agent.OS'],'Linux')
        displayName: Enable IPv6
        
      - script: |
          curl -fo $HOME/stamp https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-03-17-stamp-x86_64-unknown-linux-musl
          chmod +x $HOME/stamp
          export PATH=$PATH:$HOME
          echo "##vso[task.setvariable variable=PATH;]$PATH"
        condition: eq(variables['Agent.OS'],'Linux')
        displayName: install linux

      - script: |
          echo "#### Disk usage before running script:"
          df -h
          du . | sort -nr | head -n100
        displayName: check disk usage

      - script: |
          set -x
          [ -z "$IMAGE" ] && export IMAGE=$SYSTEM_JOBDISPLAYNAME
          export RUN_SCRIPT="$BUILD_SOURCESDIRECTORY/src/ci/init_repo.sh . $HOME/rustsrc && src/ci/docker/run.sh $IMAGE"
          echo "$RUN_SCRIPT"
          echo "##vso[task.setvariable variable=IMAGE]$IMAGE"
          echo "##vso[task.setvariable variable=RUN_SCRIPT]$RUN_SCRIPT"
          echo "##vso[task.setvariable variable=TRAVIS_OS_NAME;]linux"
        condition: eq(variables['Agent.OS'],'Linux')
        displayName: prepare run script for linux
      
      - script: |
          sudo sh -c 'echo "/checkout/obj/cores/core.%p.%E" > /proc/sys/kernel/core_pattern'
        condition: eq(variables['Agent.OS'],'Linux')
        displayName: Enable core dump on Linux

      - script: |
          git clone --depth=1 https://github.com/rust-lang-nursery/rust-toolstate.git
          cd rust-toolstate
          python2.7 "$BUILD_SOURCESDIRECTORY/src/tools/publish_toolstate.py" "$(git rev-parse HEAD)" "$(git log --format=%s -n1 HEAD)" "" ""
          cd ..
          rm -rf rust-toolstate
        condition: eq(variables['IMAGE'],'mingw-check')
        displayName: verify the publish_toolstate script works

      # Log time information from this machine and an external machine for insight into possible
      # clock drift. Timezones don't matter since relative deltas give all the necessary info.
      - script: |
          date && (curl -fs --head https://google.com | grep ^Date: | sed 's/Date: //g' || true)
        displayName: check for clock skew before

      - script: |
          echo RUN_SCRIPT="$RUN_SCRIPT"
          export RUN_SCRIPT="${RUN_SCRIPT//\'}"
          echo RUN_SCRIPT="$RUN_SCRIPT"

          echo TRAVIS_OS_NAME="$TRAVIS_OS_NAME"
          export TRAVIS_OS_NAME="${TRAVIS_OS_NAME//\'}"
          echo TRAVIS_OS_NAME="$TRAVIS_OS_NAME"

          echo IMAGE="$IMAGE"
          export IMAGE="${IMAGE//\'}"
          echo IMAGE="$IMAGE"

          echo Emulate for CiEnv
          export CI="true"
          export TRAVIS="true"
          export CI_JOB_NAME="$SYSTEM_JOBDISPLAYNAME"

          if [ "$DISABLE_SCCACHE" == "1" ]; then unset SCCACHE_AZURE_CONNECTION_STRING; fi

          printenv | sort | grep -v SCCACHE_AZURE_CONNECTION_STRING
          which sccache
          stamp sh -x -c "$RUN_SCRIPT"
        displayName: run script
        env:
          # explicitly decrypt secret variables
          # see https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch
          SCCACHE_AZURE_CONNECTION_STRING: $(SCCACHE_AZURE_CONNECTION_STRING)
          DOCKER_LAYER_CACHE_ACCOUNT_KEY: $(DOCKER_LAYER_CACHE_ACCOUNT_KEY)

      - script: |
          date && (curl -fs --head https://google.com | grep ^Date: | sed 's/Date: //g' || true)
        displayName: check for clock skew after
